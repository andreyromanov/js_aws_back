service: import-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-2
  profile: student1
  iam:
    role:
      statements:
        - Effect: Allow
          Action: [
            "s3:PutObject",
            "s3:GetObject",
            "s3:DeleteObject",
            "s3:*"
          ]
          Resource: [
            "arn:aws:s3:::import-service-bucket-aws-js",
            "arn:aws:s3:::import-service-bucket-aws-js/*"
          ]

        - Effect: Allow
          Action:
            - sqs:*
          Resource: '*'
  
functions:
  importProductsFile:
    handler: src/importProductsFile.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          authorizer: arn:aws:lambda:${aws:region}:${aws:accountId}:function:authorization-service-dev-basicAuthorizer
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: src/importFileParser.importFileParser
    events:
      - s3:
          bucket: import-service-bucket-aws-js
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
plugins:
  - serverless-esbuild
custom:
  esbuild:
    bundle: true
    minify: true
   